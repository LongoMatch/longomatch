<?xml version="1.0" encoding="utf-8"?>
<VisualStudioToolFile
	Name="OABuild Rules"
	Version="8.00"
	>
	<Rules>
		<CustomBuildRule
			Name="HeaderInstallTool"
			DisplayName="Headerfile Installation Tool"
			CommandLine="if not exist $(OutDir)\include\[ModuleName]\NUL mkdir $(OutDir)\include\[ModuleName]&#x0D;&#x0A;copy /B /Y &quot;$(InputPath)&quot; $(OutDir)\include\[ModuleName]\"
			Outputs="$(OutDir)\include\[ModuleName]\$(InputFileName)"
			FileExtensions="*.insthdr"
			ExecutionDescription="Installing $(InputFileName) to $(OutDir)\include\[ModuleName]"
			>
			<Properties>
				<StringProperty
					Name="ModuleName"
					DisplayName="Module name"
					Description="Module name, meaning that headerfiles get installed to $(OutDir)\include\[ModuleName]\. Leave blank to install in the toplevel include directory."
					Switch="[value]"
				/>
			</Properties>
		</CustomBuildRule>
		<CustomBuildRule
			Name="GObjectGenMarshalTool"
			DisplayName="GObject Marshaller Generation Tool"
			CommandLine="if not exist $(IntDir)\[OutputSubdir]\NUL mkdir $(IntDir)\[OutputSubdir]&#x0D;&#x0A;&#x0D;&#x0A;$(SolutionDir)\Win32\$(ConfigurationName)\bin\glib-genmarshal.exe --header --skip-source [NoStdInc] [FunctionPrefix] [inputs] &gt; &quot;$(IntDir)\[OutputSubdir]\$(InputName).h.tmp&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;$(SolutionDir)\Win32\$(ConfigurationName)\bin\glib-genmarshal.exe --body --skip-source [NoStdInc] [Internal] [FunctionPrefix] [inputs] &gt; &quot;$(IntDir)\[OutputSubdir]\$(InputName).c.tmp&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;&#x0D;&#x0A;if exist $(IntDir)\[OutputSubdir]\$(InputName).h del $(IntDir)\[OutputSubdir]\$(InputName).h&#x0D;&#x0A;if exist $(IntDir)\[OutputSubdir]\$(InputName).c del $(IntDir)\[OutputSubdir]\$(InputName).c&#x0D;&#x0A;&#x0D;&#x0A;ren &quot;$(IntDir)\[OutputSubdir]\$(InputName).h.tmp&quot; &quot;$(InputName).h&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;ren &quot;$(IntDir)\[OutputSubdir]\$(InputName).c.tmp&quot; &quot;$(InputName).c&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;&#x0D;&#x0A;echo badgers &gt; &quot;$(IntDir)\$(InputFileName).stamp&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;exit 0&#x0D;&#x0A;&#x0D;&#x0A;:ERROR&#x0D;&#x0A;del $(IntDir)\[OutputSubdir]\$(InputName).h.tmp 2&gt;NUL&#x0D;&#x0A;del $(IntDir)\[OutputSubdir]\$(InputName).c.tmp 2&gt;NUL&#x0D;&#x0A;del $(IntDir)\[OutputSubdir]\$(InputName).h 2&gt;NUL&#x0D;&#x0A;del $(IntDir)\[OutputSubdir]\$(InputName).c 2&gt;NUL&#x0D;&#x0A;del $(IntDir)\$(InputFileName).stamp 2&gt;NUL&#x0D;&#x0A;exit 1&#x0D;&#x0A;"
			Outputs="$(IntDir)\$(InputFileName).stamp"
			FileExtensions="*.list"
			ExecutionDescription="Generating GObject marshaller code"
			>
			<Properties>
				<StringProperty
					Name="OutputSubdir"
					DisplayName="OutputSubdir"
					Description="Subdirectory of output directory. Files are written to $(IntDir)\[OutputSubdir]. Optional; output ends up in $(IntDir) if not set."
					Switch="[value]"
				/>
				<StringProperty
					Name="FunctionPrefix"
					DisplayName="Prefix"
					Category="GObject"
					Description="Prefix for marshallers generated"
					Switch="--prefix=[value]"
					DefaultValue="foo_marshal"
				/>
				<BooleanProperty
					Name="NoStdInc"
					DisplayName="NoStdInc"
					Category="GObject"
					Description="Disable standard includes."
					Switch="--nostdinc"
				/>
				<BooleanProperty
					Name="Internal"
					DisplayName="Internal"
					Category="GObject"
					Description="Mark generated functions as internal."
					Switch="--internal"
				/>
			</Properties>
		</CustomBuildRule>
		<CustomBuildRule
			Name="GObjectMkEnumsTool"
			DisplayName="GObject Enum Generation Tool"
			CommandLine="set INPUTFILES=[InputFiles]&#x0D;&#x0A;$(GLibMkEnumsWrapper) $(OutDir)\bin\glib-mkenums.pl $(InputDir) - $(IntDir)\[OutputSubdir] [OutputFilenameBase] [OutputTemplateFiles] [Define] [Namespace]&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;&#x0D;&#x0A;echo snakes &gt; &quot;$(IntDir)\$(InputFileName).stamp&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;exit 0&#x0D;&#x0A;&#x0D;&#x0A;:ERROR&#x0D;&#x0A;del $(IntDir)\[OutputSubdir]\[OutputFilenameBase].h 2&gt;NUL&#x0D;&#x0A;del $(IntDir)\[OutputSubdir]\[OutputFilenameBase].c 2&gt;NUL&#x0D;&#x0A;del $(IntDir)\$(InputFileName).stamp 2&gt;NUL&#x0D;&#x0A;exit 1&#x0D;&#x0A;"
			Outputs="$(IntDir)\$(InputFileName).stamp"
			AdditionalDependencies="$(GLibMkEnumsWrapper);[InputFiles]"
			FileExtensions="*.snakes"
			ExecutionDescription="Generating GObject enum code"
			>
			<Properties>
				<StringProperty
					Name="InputFiles"
					DisplayName="InputFiles"
					Description="List of absolute paths for input header files, separated by semicolon."
					Switch="[value]"
				/>
				<StringProperty
					Name="OutputSubdir"
					DisplayName="OutputSubdir"
					Description="Subdirectory of output directory. Files are written to $(IntDir)\[OutputSubdir]. Optional; output ends up in $(IntDir) if not set."
					Switch="[value]"
				/>
				<StringProperty
					Name="OutputFilenameBase"
					DisplayName="OutputFilenameBase"
					Description="Base file name of files output, which get the named [OutputFilenameBase].h and [OutputFilenameBase].c."
					Switch="[value]"
				/>
				<StringProperty
					Name="OutputTemplateFiles"
					DisplayName="TemplateFiles"
					Description="Absolute paths of output template files, separated by semicolon. Must be specified if Define and Namespace are not set."
					Switch="[value]"
				/>
				<StringProperty
					Name="Define"
					DisplayName="Define"
					Description="Include guard name used. Must be specified if OutputTemplateFiles is not set."
					Switch="[value]"
				/>
				<StringProperty
					Name="Namespace"
					DisplayName="Namespace"
					Description="Namespace used. Must be specified if OutputTemplateFiles is not set."
					Switch="[value]"
				/>
			</Properties>
		</CustomBuildRule>
		<CustomBuildRule
			Name="GenSDKVSPropsTool"
			DisplayName="SDK VSProps Generation Tool"
			CommandLine="if not exist $(OutDir)\vsprops\NUL mkdir $(OutDir)\vsprops&#x0D;&#x0A;&#x0D;&#x0A;$(Sed) -e &quot;s,@GLIB_API_VERSION@,$(GLibApiVersion),g&quot; -e &quot;s,@GSTREAMER_API_VERSION@,$(GStreamerApiVersion),g&quot; &quot;$(InputPath)&quot; &gt; &quot;$(OutDir)\vsprops\[OutputFilenameBase].vsprops.tmp&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;&#x0D;&#x0A;if exist &quot;$(OutDir)\vsprops\[OutputFilenameBase].vsprops&quot; del &quot;$(OutDir)\vsprops\[OutputFilenameBase].vsprops&quot;&#x0D;&#x0A;ren &quot;$(OutDir)\vsprops\[OutputFilenameBase].vsprops.tmp&quot; &quot;[OutputFilenameBase].vsprops&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;&#x0D;&#x0A;echo mushroom &gt; &quot;$(IntDir)\$(InputFileName).stamp&quot;&#x0D;&#x0A;if %ERRORLEVEL% neq 0 goto ERROR&#x0D;&#x0A;exit 0&#x0D;&#x0A;&#x0D;&#x0A;:ERROR&#x0D;&#x0A;del &quot;$(OutDir)\vsprops\[OutputFilenameBase].vsprops.tmp&quot; 2&gt;NUL&#x0D;&#x0A;del &quot;$(OutDir)\vsprops\[OutputFilenameBase].vsprops&quot; 2&gt;NUL&#x0D;&#x0A;del &quot;$(IntDir)\$(InputFileName).stamp&quot; 2&gt;NUL&#x0D;&#x0A;exit 1&#x0D;&#x0A;"
			Outputs="$(IntDir)\$(InputFileName).stamp"
			FileExtensions="*.vsprops.in"
			ExecutionDescription="Generating [OutputFilenameBase].vsprops"
			>
			<Properties>
				<StringProperty
					Name="OutputFilenameBase"
					DisplayName="OutputFilenameBase"
					Description="Base file name of vsprops file output, which get the named [OutputFilenameBase].vsprops."
					Switch="[value]"
				/>
			</Properties>
		</CustomBuildRule>
	</Rules>
</VisualStudioToolFile>
